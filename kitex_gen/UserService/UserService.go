// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package userservice

import (
	"context"
	"fmt"
)

type GetUserRequest struct {
	Id int64 `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
}

func NewGetUserRequest() *GetUserRequest {
	return &GetUserRequest{}
}

func (p *GetUserRequest) InitDefault() {
}

func (p *GetUserRequest) GetId() (v int64) {
	return p.Id
}
func (p *GetUserRequest) SetId(val int64) {
	p.Id = val
}

func (p *GetUserRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserRequest(%+v)", *p)
}

var fieldIDToName_GetUserRequest = map[int16]string{
	1: "id",
}

type GetUserResponse struct {
	Name string `thrift:"name,1,required" frugal:"1,required,string" json:"name"`
}

func NewGetUserResponse() *GetUserResponse {
	return &GetUserResponse{}
}

func (p *GetUserResponse) InitDefault() {
}

func (p *GetUserResponse) GetName() (v string) {
	return p.Name
}
func (p *GetUserResponse) SetName(val string) {
	p.Name = val
}

func (p *GetUserResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserResponse(%+v)", *p)
}

var fieldIDToName_GetUserResponse = map[int16]string{
	1: "name",
}

type UserService interface {
	GetUser(ctx context.Context, request *GetUserRequest) (r *GetUserResponse, err error)
}

type UserServiceGetUserArgs struct {
	Request *GetUserRequest `thrift:"request,1" frugal:"1,default,GetUserRequest" json:"request"`
}

func NewUserServiceGetUserArgs() *UserServiceGetUserArgs {
	return &UserServiceGetUserArgs{}
}

func (p *UserServiceGetUserArgs) InitDefault() {
}

var UserServiceGetUserArgs_Request_DEFAULT *GetUserRequest

func (p *UserServiceGetUserArgs) GetRequest() (v *GetUserRequest) {
	if !p.IsSetRequest() {
		return UserServiceGetUserArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *UserServiceGetUserArgs) SetRequest(val *GetUserRequest) {
	p.Request = val
}

func (p *UserServiceGetUserArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *UserServiceGetUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetUserArgs(%+v)", *p)
}

var fieldIDToName_UserServiceGetUserArgs = map[int16]string{
	1: "request",
}

type UserServiceGetUserResult struct {
	Success *GetUserResponse `thrift:"success,0,optional" frugal:"0,optional,GetUserResponse" json:"success,omitempty"`
}

func NewUserServiceGetUserResult() *UserServiceGetUserResult {
	return &UserServiceGetUserResult{}
}

func (p *UserServiceGetUserResult) InitDefault() {
}

var UserServiceGetUserResult_Success_DEFAULT *GetUserResponse

func (p *UserServiceGetUserResult) GetSuccess() (v *GetUserResponse) {
	if !p.IsSetSuccess() {
		return UserServiceGetUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceGetUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetUserResponse)
}

func (p *UserServiceGetUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceGetUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetUserResult(%+v)", *p)
}

var fieldIDToName_UserServiceGetUserResult = map[int16]string{
	0: "success",
}
