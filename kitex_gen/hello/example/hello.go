// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package example

import (
	"context"
	"fmt"
)

type HelloReq struct {
	Name string `thrift:"Name,1" frugal:"1,default,string" json:"Name"`
}

func NewHelloReq() *HelloReq {
	return &HelloReq{}
}

func (p *HelloReq) InitDefault() {
}

func (p *HelloReq) GetName() (v string) {
	return p.Name
}
func (p *HelloReq) SetName(val string) {
	p.Name = val
}

func (p *HelloReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HelloReq(%+v)", *p)
}

var fieldIDToName_HelloReq = map[int16]string{
	1: "Name",
}

type HelloResp struct {
	RespBody string `thrift:"RespBody,1" frugal:"1,default,string" json:"RespBody"`
}

func NewHelloResp() *HelloResp {
	return &HelloResp{}
}

func (p *HelloResp) InitDefault() {
}

func (p *HelloResp) GetRespBody() (v string) {
	return p.RespBody
}
func (p *HelloResp) SetRespBody(val string) {
	p.RespBody = val
}

func (p *HelloResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HelloResp(%+v)", *p)
}

var fieldIDToName_HelloResp = map[int16]string{
	1: "RespBody",
}

type HelloService interface {
	HelloMethod(ctx context.Context, request *HelloReq) (r *HelloResp, err error)
}

type HelloServiceHelloMethodArgs struct {
	Request *HelloReq `thrift:"request,1" frugal:"1,default,HelloReq" json:"request"`
}

func NewHelloServiceHelloMethodArgs() *HelloServiceHelloMethodArgs {
	return &HelloServiceHelloMethodArgs{}
}

func (p *HelloServiceHelloMethodArgs) InitDefault() {
}

var HelloServiceHelloMethodArgs_Request_DEFAULT *HelloReq

func (p *HelloServiceHelloMethodArgs) GetRequest() (v *HelloReq) {
	if !p.IsSetRequest() {
		return HelloServiceHelloMethodArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *HelloServiceHelloMethodArgs) SetRequest(val *HelloReq) {
	p.Request = val
}

func (p *HelloServiceHelloMethodArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *HelloServiceHelloMethodArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HelloServiceHelloMethodArgs(%+v)", *p)
}

var fieldIDToName_HelloServiceHelloMethodArgs = map[int16]string{
	1: "request",
}

type HelloServiceHelloMethodResult struct {
	Success *HelloResp `thrift:"success,0,optional" frugal:"0,optional,HelloResp" json:"success,omitempty"`
}

func NewHelloServiceHelloMethodResult() *HelloServiceHelloMethodResult {
	return &HelloServiceHelloMethodResult{}
}

func (p *HelloServiceHelloMethodResult) InitDefault() {
}

var HelloServiceHelloMethodResult_Success_DEFAULT *HelloResp

func (p *HelloServiceHelloMethodResult) GetSuccess() (v *HelloResp) {
	if !p.IsSetSuccess() {
		return HelloServiceHelloMethodResult_Success_DEFAULT
	}
	return p.Success
}
func (p *HelloServiceHelloMethodResult) SetSuccess(x interface{}) {
	p.Success = x.(*HelloResp)
}

func (p *HelloServiceHelloMethodResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HelloServiceHelloMethodResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HelloServiceHelloMethodResult(%+v)", *p)
}

var fieldIDToName_HelloServiceHelloMethodResult = map[int16]string{
	0: "success",
}
