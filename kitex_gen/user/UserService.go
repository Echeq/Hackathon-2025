// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package user

import (
	"context"
	"fmt"
)

type User struct {
	ID   string `thrift:"ID,1,required" frugal:"1,required,string" json:"ID"`
	Name string `thrift:"Name,2,required" frugal:"2,required,string" json:"Name"`
}

func NewUser() *User {
	return &User{}
}

func (p *User) InitDefault() {
}

func (p *User) GetID() (v string) {
	return p.ID
}

func (p *User) GetName() (v string) {
	return p.Name
}
func (p *User) SetID(val string) {
	p.ID = val
}
func (p *User) SetName(val string) {
	p.Name = val
}

func (p *User) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("User(%+v)", *p)
}

var fieldIDToName_User = map[int16]string{
	1: "ID",
	2: "Name",
}

type UserService interface {
	GetUser(ctx context.Context, iD string) (r *User, err error)
}

type UserServiceGetUserArgs struct {
	ID string `thrift:"ID,1" frugal:"1,default,string" json:"ID"`
}

func NewUserServiceGetUserArgs() *UserServiceGetUserArgs {
	return &UserServiceGetUserArgs{}
}

func (p *UserServiceGetUserArgs) InitDefault() {
}

func (p *UserServiceGetUserArgs) GetID() (v string) {
	return p.ID
}
func (p *UserServiceGetUserArgs) SetID(val string) {
	p.ID = val
}

func (p *UserServiceGetUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetUserArgs(%+v)", *p)
}

var fieldIDToName_UserServiceGetUserArgs = map[int16]string{
	1: "ID",
}

type UserServiceGetUserResult struct {
	Success *User `thrift:"success,0,optional" frugal:"0,optional,User" json:"success,omitempty"`
}

func NewUserServiceGetUserResult() *UserServiceGetUserResult {
	return &UserServiceGetUserResult{}
}

func (p *UserServiceGetUserResult) InitDefault() {
}

var UserServiceGetUserResult_Success_DEFAULT *User

func (p *UserServiceGetUserResult) GetSuccess() (v *User) {
	if !p.IsSetSuccess() {
		return UserServiceGetUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceGetUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*User)
}

func (p *UserServiceGetUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceGetUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetUserResult(%+v)", *p)
}

var fieldIDToName_UserServiceGetUserResult = map[int16]string{
	0: "success",
}
